name: Sanity tests

on:
  workflow_dispatch:
    inputs:
      deployment-name:
        description: 'Deployment name'
        required: true 
        type: string
      ec-api-key:
        description: 'EC key'
        required: true 
        type: string
      ec-stack-version:
        description: 'EC version'
        required: true 
        type: string
      myBooleanInput:
        description: 'Boolean: Cleanup resources after provision'
        default: false
        type: boolean
  workflow_call:
    inputs:
      deployment_name:
        description: Name of the deployment to create
        required: true
        type: string
      ec-api-key:
        description: 'EC key'
        required: true 
        type: string
      ec-stack-version:
        description: 'EC version'
        required: true 
        type: string
    outputs:
      ec-key:
        description: "tf var key"
        value: ${{ jobs.Deploy.outputs.tf-var-ec-api-key }}
      public-key:
        description: "public key"
        value: ${{ jobs.Deploy.outputs.public-key }}
      
env:
  WORKING_DIR: fleet_api/src
  COMMON_TAGS: "Key=division,Value=engineering Key=org,Value=security Key=team,Value=cloud-security-posture"

jobs:
  Deploy:
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    outputs:
      tf-var-ec-api-key: ${{ steps.step-output.outputs.TF_VAR_ec_api_key }}
      public-key: ${{ steps.step-public-output.outputs.public_key }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        
      - name: Input is boolean but string
        run: echo "Run only if true is interpreted as string"
        if: ${{ github.event.inputs.myBooleanInput == 'true' }}

      - name: Input is boolean
        run: echo "Run only if true is bool"
        if: ${{ inputs.myBooleanInput == true }}

      - name: Mask data
        run: |
          ec_api_key=$(jq -r '.inputs["ec-api-key"]' $GITHUB_EVENT_PATH)
          # echo $ec_api_key
          echo "::add-mask::$ec_api_key"
          echo "TF_VAR_ec_api_key=$ec_api_key" >> $GITHUB_ENV
      
      - name: Print Actor
        run: echo "'${{ env.COMMON_TAGS }} Key=owner,Value=${{ github.actor }}'"

      - name: Print deployment name and version
        run: |
          echo "Deployment name: ${{ inputs.deployment_name }}"
          echo "Version: ${{ inputs.ec-stack-version }}"

      - name: Set Output
        id: step-output
        run: echo "TF_VAR_ec_api_key=$ec_api_key" >> $GITHUB_OUTPUT
        
      - name: Set Public output
        id: step-public-output
        run: echo "public_key=public key" >> $GITHUB_OUTPUT

      - name: Print data
        run: echo "Finish"
